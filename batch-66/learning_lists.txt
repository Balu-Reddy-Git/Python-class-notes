lists - linear representation of data.
list can hold both homogeneous/hetrogensou collection of data.
Arrays - numpy ( lists)

In [1]: my_fruits = ['apple','banana','cherry','dates']

In [2]: print my_fruits,type(my_fruits)
['apple', 'banana', 'cherry', 'dates'] <type 'list'>

In [3]: # lists are indexed

In [4]: # my_fruits = ['apple','banana','cherry','dates']
   ...: 

In [5]: #               0         1        2        3

In [6]: #              -4        -3        -2       -1

In [7]: my_fruits[0]
Out[7]: 'apple'

In [8]: my_fruits[-4]
Out[8]: 'apple'

In [9]: # slicing

In [10]: my_fruits[0:2]
Out[10]: ['apple', 'banana']

In [11]: # modify the elements of a list

In [12]: my_fruits[0] = 'Apple'

In [13]: print my_fruits
['Apple', 'banana', 'cherry', 'dates']

In [14]: my_string="python"

In [15]: my_string[0]
Out[15]: 'p'

In [16]: my_string[0]="P"
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-16-2de60217cbe7> in <module>()
----> 1 my_string[0]="P"

TypeError: 'str' object does not support item assignment

In [17]: # in

In [18]: my_fruits
Out[18]: ['Apple', 'banana', 'cherry', 'dates']

In [19]: 'cherry' in my_fruits
Out[19]: True

In [20]: 'apple' in my_fruits
Out[20]: False

In [22]: my_empty = []

In [23]: print my_empty
[]

In [24]: my_empty = list()

In [25]: print my_empty
[]

In [26]: 

In [27]: # function

In [28]: my_fruits 
Out[28]: ['Apple', 'banana', 'cherry', 'dates']

In [29]: # append

In [30]: my_fruits.append?
Docstring: L.append(object) -- append object to end
Type:      builtin_function_or_method

In [31]: my_fruits.append('fig')

In [32]: print my_fruits
['Apple', 'banana', 'cherry', 'dates', 'fig']

In [33]: # extend

In [34]: my_fruits.extend?
Docstring: L.extend(iterable) -- extend list by appending elements from the iterable
Type:      builtin_function_or_method

In [35]: my_fruits.extend(['gauva','jackfruit','kiwi'])

In [36]: my_fruits
Out[36]: ['Apple', 'banana', 'cherry', 'dates', 'fig', 'gauva', 'jackfruit', 'kiwi']

In [37]: for value in my_fruits:
    ...:     print value
    ...:     
Apple
banana
cherry
dates
fig
gauva
jackfruit
kiwi

In [38]: # insert

In [39]: my_fruits.insert?
Docstring: L.insert(index, object) -- insert object before index
Type:      builtin_function_or_method

In [40]: my_fruits.insert(0,'avacado')

In [41]: print my_fruits
['avacado', 'Apple', 'banana', 'cherry', 'dates', 'fig', 'gauva', 'jackfruit', 'kiwi']

In [42]: my_fruits.insert(6,'grapes')

In [43]: print my_fruits
['avacado', 'Apple', 'banana', 'cherry', 'dates', 'fig', 'grapes', 'gauva', 'jackfruit', 'kiwi']

In [44]: # index

In [45]: my_fruits.index?
Docstring:
L.index(value, [start, [stop]]) -> integer -- return first index of value.
Raises ValueError if the value is not present.
Type:      builtin_function_or_method

In [46]: my_fruits.index('jackfruit')
Out[46]: 8

In [47]: print len(my_fruits)
10

In [48]: my_string
Out[48]: 'python'

In [49]: print len(my_string)
6

In [50]: my_fruits.insert(3,'grapes')

In [51]: print my_fruits
['avacado', 'Apple', 'banana', 'grapes', 'cherry', 'dates', 'fig', 'grapes', 'gauva', 'jackfruit', 'kiwi']

In [52]: # count

In [53]: my_fruits.count?
Docstring: L.count(value) -> integer -- return number of occurrences of value
Type:      builtin_function_or_method

In [54]: print my_fruits.count('grapes')
2

In [55]: print my_fruits.count('apple')
0

In [56]: print my_fruits.index('grapes')
3

In [57]: print my_fruits.index('grapes',4)
7

In [59]: #  pop

In [60]: my_fruits.pop?
Docstring:
L.pop([index]) -> item -- remove and return item at index (default last).
Raises IndexError if list is empty or index is out of range.
Type:      builtin_function_or_method

In [61]: my_fruits
Out[61]: 
['avacado',
 'Apple',
 'banana',
 'grapes',
 'cherry',
 'dates',
 'fig',
 'grapes',
 'gauva',
 'jackfruit',
 'kiwi']

In [62]: my_fruits.index('fig')
Out[62]: 6

In [63]: my_fruits.pop(my_fruits.index('fig'))
Out[63]: 'fig'

In [64]: print my_fruits
['avacado', 'Apple', 'banana', 'grapes', 'cherry', 'dates', 'grapes', 'gauva', 'jackfruit', 'kiwi']

In [65]: my_fruits.pop(10)
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
<ipython-input-65-293403469973> in <module>()
----> 1 my_fruits.pop(10)

IndexError: pop index out of range

In [67]: # remove

In [68]: my_fruits.remove?
Docstring:
L.remove(value) -- remove first occurrence of value.
Raises ValueError if the value is not present.
Type:      builtin_function_or_method

In [69]: my_fruits
Out[69]: 
['avacado',
 'Apple',
 'banana',
 'grapes',
 'cherry',
 'dates',
 'grapes',
 'gauva',
 'jackfruit',
 'kiwi']

In [70]: my_fruits.remove('Apple')

In [71]: print my_fruits
['avacado', 'banana', 'grapes', 'cherry', 'dates', 'grapes', 'gauva', 'jackfruit', 'kiwi']

In [72]: my_fruits.remove('Apple')
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-72-808718e33a23> in <module>()
----> 1 my_fruits.remove('Apple')

ValueError: list.remove(x): x not in list

In [73]: my_fruits.remove('grapes')

In [74]: print my_fruits
['avacado', 'banana', 'cherry', 'dates', 'grapes', 'gauva', 'jackfruit', 'kiwi']

In [75]: 

In [76]: print my_fruits
['avacado', 'banana', 'cherry', 'dates', 'grapes', 'gauva', 'jackfruit', 'kiwi']

In [77]: # reverse

In [78]: my_fruits.reverse?
Docstring: L.reverse() -- reverse *IN PLACE*
Type:      builtin_function_or_method

In [79]: 

In [79]: print my_fruits.reverse()
None

In [80]: print my_fruits
['kiwi', 'jackfruit', 'gauva', 'grapes', 'dates', 'cherry', 'banana', 'avacado']

In [81]: # sort

In [82]: my_fruits.sort?
Docstring:
L.sort(cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*;
cmp(x, y) -> -1, 0, 1
Type:      builtin_function_or_method

In [83]: my_fruits.sort()

In [84]: print my_fruits
['avacado', 'banana', 'cherry', 'dates', 'gauva', 'grapes', 'jackfruit', 'kiwi']

In [85]: print my_fruits(reverse=True)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-85-bc3a3f405d86> in <module>()
----> 1 print my_fruits(reverse=True)

TypeError: 'list' object is not callable

In [86]: my_fruits.sort(reverse=True)

In [87]: print my_fruits
['kiwi', 'jackfruit', 'grapes', 'gauva', 'dates', 'cherry', 'banana', 'avacado']

In [88]: 


# task1:

input:
my_fruits = ['apple','apple','banana','banana','cherry']
output:
my_fruits = ['apple','banana','cherry']
my_dupli = ['apple','banana']

# task2:

input:
days = ['yesterday','today','tomorrow','dayafter']
output:
a) task1:
output:
yesterday  9
today      5
tomorrow   8
dayafter   8

b) task2:
output:
Yesterday
TOday
TOMorrow
DAYAfter


References:
https://scipy.org/
https://github.com/tuxfux-hlp-notes/seminars
https://pandas.pydata.org/pandas-docs/stable/10min.html